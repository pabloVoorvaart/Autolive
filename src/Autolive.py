import argparse
import boto3
import logging
import sys
import json

from Channel import Channel

# Logging configuration
logging.basicConfig(filename='../debug/logs/app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')

def extract_data(data):
    """ Extracts values of json object generated by ffprobe.
        Example data can be found at debug/sample_input.json
    """
    try:
        streams = json.loads(data)['streams']
        input_values = {
            'audio_codec': streams[0]['codec_name'],
            'audio_sample_rate': int(streams[0]['sample_rate']),
            'audio_bitrate': int(streams[0]['bit_rate']),
            'video_codec': streams[1]['codec_name'],
            'video_profile': streams[1]['profile'],
            'video_width': int(streams[1]['width']),
            'video_height': int(streams[1]['height']),
            'video_fps': int(streams[1]['r_frame_rate'].split('/')[0]),
            'video_bitrate': round(int(streams[1]['bit_rate'])/1000)
        }
        return input_values
    except Exception as e:
        logging.error("Input data was invalid and could not be loaded.")
        logging.error("Input data: " + str(data))
        sys.exit()

def debug(key, data):
    logging.debug("Generating debug report in debug/channel_debug {key}.log", str(key))
    data = extract_data(data)
    with open("../debug/channel_debug/" + key + ".log", "w") as f:
        f.write("Stream key is \"{key}\" \n".format(key=key))
        f.write("Input data is: \n================\n")
        f.write(json.dumps(data, indent=4, sort_keys=True))
        f.write("\n==============\n")
        f.write("Generating channel object...\n")
        channel = Channel(key, data['video_width'], data['video_height'], data['video_fps'],\
                          data['video_bitrate'], data['audio_bitrate'])
        print(channel.check_status())
        
    return

def create_channel():
    """ Create an AWS Medialive Channel """
    channel = Channel('test', 1080, 1920, 60, 7800, 192000)
    channel.create_channel()
    
if __name__ == "__main__":
    
    parser = argparse.ArgumentParser(description='Test.')
    parser.add_argument('--action', action='store', type=str, required=True, choices=['Create', 'Delete'])
    parser.add_argument('--key', type=str)
    parser.add_argument('--data', type=str)
    parser.add_argument('--debug', type=bool)
    args = parser.parse_args()
    
    if args.action == 'Create':
        if args.data == None or args.key == None:
            parser.error("Action \"Create\" needs --data and --key flags. Check -h or --help for more info.")
        if args.debug:
            debug(args.key, args.data)
    
    
    
